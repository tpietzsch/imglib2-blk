/*
 * TODO: imglib2 header
 */

/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package net.imglib2.blk;

#set( $primitive = {
    "i8" : "byte",
    "u8" : "byte",
    "i16" : "short",
    "u16" : "short",
    "i32" : "int",
    "u32" : "int",
    "i64" : "long",
    "u64" : "long",
    "f32" : "float",
    "f64" : "double"
} )
#set( $nbits = {
    "byte" : 8,
    "short" : 16,
    "int" : 32,
    "long" : 64,
    "float" : 32,
    "double" : 64
} )
#set( $integral = {
    "i8" : true,
    "u8" : true,
    "i16" : true,
    "u16" : true,
    "i32" : true,
    "u32" : true,
    "i64" : true,
    "u64" : true,
    "f32" : false,
    "f64" : false
} )
#set( $mask = {
    "u8" : "0xff",
    "u16" : "0xffff",
    "u32" : "0xffffffffL"
} )
#set( $toInt = ["i8", "u8", "i16", "u16", "i32"] )
#set( $toLong = ["i8", "u8", "i16", "u16", "i32", "u32", "i64"] )
#set( $longTo = ["i8", "u8", "i16", "u16", "i32", "u32", "i64"] )


public class ConversionGenerated
{

#foreach( $t in $toInt )
#set( $p = $primitive[$t] )
#set( $m = $mask[$t] )
	static int ${t}_to_int( ${primitive[$t]} value ) { return value#if( $m ) & $m#end; }
#end

#foreach( $t in $toLong )
#set( $p = $primitive[$t] )
#set( $m = $mask[$t] )
    static long ${t}_to_long( $p value ) { return value#if( $m ) & $m#end; }
#end

#foreach( $o in ["int", "long"] )
#foreach( $t in $longTo )
#set( $p = $primitive[$t] )
#if( $nbits[$p] >= $nbits[$o] )
	static $p to_$t( $o value ) { return value; }
#else
	static $p to_$t( $o value ) { return ( $p ) value; }
#end
#end

#end
##
##
#foreach( $o in ["float", "double"] )
#foreach( $t in $longTo )
#set( $p = $primitive[$t] )
#set( $viaDouble = ["u32", "i64"] )
#if( $o.equals("float") && $viaDouble.contains($t) )
	static $p to_$t( $o value ) { return to_$t( Math.round( ( double ) value ) ); }
#else
	static $p to_$t( $o value ) { return to_$t( Math.round( value ) ); }
#end
#end

#end
}