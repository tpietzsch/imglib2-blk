/*
 * TODO: imglib2 header
 */

/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package net.imglib2.blk.downsample;











class TypeConversionGenerated
{

	static int from_i8( byte value ) { return value; }
	static int from_u8( byte value ) { return value & 0xff; }
	static int from_i16( short value ) { return value; }
	static int from_u16( short value ) { return value & 0xffff; }
	static int from_i32( int value ) { return value; }
	static long from_u32( int value ) { return value & 0xffffffffL; }
	static long from_i64( long value ) { return value; }
	static float from_f32( float value ) { return value; }
	static double from_f64( double value ) { return value; }

    static byte to_i8( int value ) { return ( byte ) value; }
    static byte to_i8_clamp_max( int value ) { return to_i8( Math.min( 0x7f, value ) ); }
    static byte to_i8_clamp( int value ) { return to_i8( Math.min( 0x7f, Math.max( -0x80, value ) ) ); }
    static byte to_u8( int value ) { return ( byte ) value; }
    static byte to_u8_clamp_max( int value ) { return to_u8( Math.min( 0xff, value ) ); }
    static byte to_u8_clamp( int value ) { return to_u8( Math.min( 0xff, Math.max( 0, value ) ) ); }
    static short to_i16( int value ) { return ( short ) value; }
    static short to_i16_clamp_max( int value ) { return to_i16( Math.min( 0x7fff, value ) ); }
    static short to_i16_clamp( int value ) { return to_i16( Math.min( 0x7fff, Math.max( -0x8000, value ) ) ); }
    static short to_u16( int value ) { return ( short ) value; }
    static short to_u16_clamp_max( int value ) { return to_u16( Math.min( 0xffff, value ) ); }
    static short to_u16_clamp( int value ) { return to_u16( Math.min( 0xffff, Math.max( 0, value ) ) ); }
    static int to_i32( int value ) { return value; }
    static int to_i32_clamp_max( int value ) { return to_i32( value ); }
    static int to_i32_clamp( int value ) { return to_i32( value ); }
    static int to_u32( int value ) { return value; }
    static int to_u32_clamp_max( int value ) { return to_u32( Math.min( 0xffff_ffffL, value ) ); }
    static int to_u32_clamp( int value ) { return to_u32( Math.min( 0xffff_ffffL, Math.max( 0L, value ) ) ); }
    static long to_i64( int value ) { return value; }
    static long to_i64_clamp_max( int value ) { return to_i64( value ); }
    static long to_i64_clamp( int value ) { return to_i64( value ); }
    static float to_f32( int value ) { return value; }
    static float to_f32_clamp_max( int value ) { return to_f32( value ); }
    static float to_f32_clamp( int value ) { return to_f32( value ); }
    static double to_f64( int value ) { return value; }
    static double to_f64_clamp_max( int value ) { return to_f64( value ); }
    static double to_f64_clamp( int value ) { return to_f64( value ); }

    static byte to_i8( long value ) { return ( byte ) value; }
    static byte to_i8_clamp_max( long value ) { return to_i8( Math.min( 0x7f, value ) ); }
    static byte to_i8_clamp( long value ) { return to_i8( Math.min( 0x7f, Math.max( -0x80, value ) ) ); }
    static byte to_u8( long value ) { return ( byte ) value; }
    static byte to_u8_clamp_max( long value ) { return to_u8( Math.min( 0xff, value ) ); }
    static byte to_u8_clamp( long value ) { return to_u8( Math.min( 0xff, Math.max( 0, value ) ) ); }
    static short to_i16( long value ) { return ( short ) value; }
    static short to_i16_clamp_max( long value ) { return to_i16( Math.min( 0x7fff, value ) ); }
    static short to_i16_clamp( long value ) { return to_i16( Math.min( 0x7fff, Math.max( -0x8000, value ) ) ); }
    static short to_u16( long value ) { return ( short ) value; }
    static short to_u16_clamp_max( long value ) { return to_u16( Math.min( 0xffff, value ) ); }
    static short to_u16_clamp( long value ) { return to_u16( Math.min( 0xffff, Math.max( 0, value ) ) ); }
    static int to_i32( long value ) { return ( int ) value; }
    static int to_i32_clamp_max( long value ) { return to_i32( Math.min( 0x7fff_ffff, value ) ); }
    static int to_i32_clamp( long value ) { return to_i32( Math.min( 0x7fff_ffff, Math.max( -0x8000_0000, value ) ) ); }
    static int to_u32( long value ) { return ( int ) value; }
    static int to_u32_clamp_max( long value ) { return to_u32( Math.min( 0xffff_ffffL, value ) ); }
    static int to_u32_clamp( long value ) { return to_u32( Math.min( 0xffff_ffffL, Math.max( 0L, value ) ) ); }
    static long to_i64( long value ) { return value; }
    static long to_i64_clamp_max( long value ) { return to_i64( value ); }
    static long to_i64_clamp( long value ) { return to_i64( value ); }
    static float to_f32( long value ) { return ( float ) value; }
    static float to_f32_clamp_max( long value ) { return to_f32( value ); }
    static float to_f32_clamp( long value ) { return to_f32( value ); }
    static double to_f64( long value ) { return value; }
    static double to_f64_clamp_max( long value ) { return to_f64( value ); }
    static double to_f64_clamp( long value ) { return to_f64( value ); }

    static byte to_i8( float value ) { return to_i8( Math.round( value ) ); }
	static byte to_i8_clamp_max( float value ) { return to_i8_clamp_max( Math.round( value ) ); }
	static byte to_i8_clamp( float value ) { return to_i8_clamp( Math.round( value ) ); }
    static byte to_u8( float value ) { return to_u8( Math.round( value ) ); }
	static byte to_u8_clamp_max( float value ) { return to_u8_clamp_max( Math.round( value ) ); }
	static byte to_u8_clamp( float value ) { return to_u8_clamp( Math.round( value ) ); }
    static short to_i16( float value ) { return to_i16( Math.round( value ) ); }
	static short to_i16_clamp_max( float value ) { return to_i16_clamp_max( Math.round( value ) ); }
	static short to_i16_clamp( float value ) { return to_i16_clamp( Math.round( value ) ); }
    static short to_u16( float value ) { return to_u16( Math.round( value ) ); }
	static short to_u16_clamp_max( float value ) { return to_u16_clamp_max( Math.round( value ) ); }
	static short to_u16_clamp( float value ) { return to_u16_clamp( Math.round( value ) ); }
    static int to_i32( float value ) { return to_i32( Math.round( value ) ); }
	static int to_i32_clamp_max( float value ) { return to_i32_clamp_max( Math.round( value ) ); }
	static int to_i32_clamp( float value ) { return to_i32_clamp( Math.round( value ) ); }
	static int to_u32( float value ) { return to_u32( Math.round( ( double ) value ) ); }
	static int to_u32_clamp_max( float value ) { return to_u32_clamp_max( Math.round( ( double ) value ) ); }
	static int to_u32_clamp( float value ) { return to_u32_clamp( Math.round( ( double ) value ) ); }
	static long to_i64( float value ) { return to_i64( Math.round( ( double ) value ) ); }
	static long to_i64_clamp_max( float value ) { return to_i64_clamp_max( Math.round( ( double ) value ) ); }
	static long to_i64_clamp( float value ) { return to_i64_clamp( Math.round( ( double ) value ) ); }
    static float to_f32( float value ) { return to_f32( Math.round( value ) ); }
	static float to_f32_clamp_max( float value ) { return to_f32_clamp_max( Math.round( value ) ); }
	static float to_f32_clamp( float value ) { return to_f32_clamp( Math.round( value ) ); }
    static double to_f64( float value ) { return to_f64( Math.round( value ) ); }
	static double to_f64_clamp_max( float value ) { return to_f64_clamp_max( Math.round( value ) ); }
	static double to_f64_clamp( float value ) { return to_f64_clamp( Math.round( value ) ); }

    static byte to_i8( double value ) { return to_i8( Math.round( value ) ); }
	static byte to_i8_clamp_max( double value ) { return to_i8_clamp_max( Math.round( value ) ); }
	static byte to_i8_clamp( double value ) { return to_i8_clamp( Math.round( value ) ); }
    static byte to_u8( double value ) { return to_u8( Math.round( value ) ); }
	static byte to_u8_clamp_max( double value ) { return to_u8_clamp_max( Math.round( value ) ); }
	static byte to_u8_clamp( double value ) { return to_u8_clamp( Math.round( value ) ); }
    static short to_i16( double value ) { return to_i16( Math.round( value ) ); }
	static short to_i16_clamp_max( double value ) { return to_i16_clamp_max( Math.round( value ) ); }
	static short to_i16_clamp( double value ) { return to_i16_clamp( Math.round( value ) ); }
    static short to_u16( double value ) { return to_u16( Math.round( value ) ); }
	static short to_u16_clamp_max( double value ) { return to_u16_clamp_max( Math.round( value ) ); }
	static short to_u16_clamp( double value ) { return to_u16_clamp( Math.round( value ) ); }
    static int to_i32( double value ) { return to_i32( Math.round( value ) ); }
	static int to_i32_clamp_max( double value ) { return to_i32_clamp_max( Math.round( value ) ); }
	static int to_i32_clamp( double value ) { return to_i32_clamp( Math.round( value ) ); }
    static int to_u32( double value ) { return to_u32( Math.round( value ) ); }
	static int to_u32_clamp_max( double value ) { return to_u32_clamp_max( Math.round( value ) ); }
	static int to_u32_clamp( double value ) { return to_u32_clamp( Math.round( value ) ); }
    static long to_i64( double value ) { return to_i64( Math.round( value ) ); }
	static long to_i64_clamp_max( double value ) { return to_i64_clamp_max( Math.round( value ) ); }
	static long to_i64_clamp( double value ) { return to_i64_clamp( Math.round( value ) ); }
    static float to_f32( double value ) { return to_f32( Math.round( value ) ); }
	static float to_f32_clamp_max( double value ) { return to_f32_clamp_max( Math.round( value ) ); }
	static float to_f32_clamp( double value ) { return to_f32_clamp( Math.round( value ) ); }
    static double to_f64( double value ) { return to_f64( Math.round( value ) ); }
	static double to_f64_clamp_max( double value ) { return to_f64_clamp_max( Math.round( value ) ); }
	static double to_f64_clamp( double value ) { return to_f64_clamp( Math.round( value ) ); }





enum UnaryOperatorTypes
{
    I8_TO_I8, I8_TO_U8, I8_TO_I16, I8_TO_U16, I8_TO_I32, I8_TO_U32, I8_TO_I64, I8_TO_F32, I8_TO_F64, 
    U8_TO_I8, U8_TO_U8, U8_TO_I16, U8_TO_U16, U8_TO_I32, U8_TO_U32, U8_TO_I64, U8_TO_F32, U8_TO_F64, 
    I16_TO_I8, I16_TO_U8, I16_TO_I16, I16_TO_U16, I16_TO_I32, I16_TO_U32, I16_TO_I64, I16_TO_F32, I16_TO_F64, 
    U16_TO_I8, U16_TO_U8, U16_TO_I16, U16_TO_U16, U16_TO_I32, U16_TO_U32, U16_TO_I64, U16_TO_F32, U16_TO_F64, 
    I32_TO_I8, I32_TO_U8, I32_TO_I16, I32_TO_U16, I32_TO_I32, I32_TO_U32, I32_TO_I64, I32_TO_F32, I32_TO_F64, 
    U32_TO_I8, U32_TO_U8, U32_TO_I16, U32_TO_U16, U32_TO_I32, U32_TO_U32, U32_TO_I64, U32_TO_F32, U32_TO_F64, 
    I64_TO_I8, I64_TO_U8, I64_TO_I16, I64_TO_U16, I64_TO_I32, I64_TO_U32, I64_TO_I64, I64_TO_F32, I64_TO_F64, 
    F32_TO_I8, F32_TO_U8, F32_TO_I16, F32_TO_U16, F32_TO_I32, F32_TO_U32, F32_TO_I64, F32_TO_F32, F32_TO_F64, 
    F64_TO_I8, F64_TO_U8, F64_TO_I16, F64_TO_U16, F64_TO_I32, F64_TO_U32, F64_TO_I64, F64_TO_F32, F64_TO_F64, 
}

}
